version: "3.8"

services:
  db:
    image: postgres:15
    container_name: zta_postgres
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "zta"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network_aziendale
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    volumes:
      - ./db/init_tables.sql:/docker-entrypoint-initdb.d/init_tables.sql
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/log:/var/log/postgresql
    ports:
      - "5433:5432"

  pep:
    build: ./pep
    container_name: zta_pep
    depends_on:
      - pdp     
    ports:
      - "8002:8002"
    networks:
      - network_aziendale
      - network_vpn
      - network_domestica
      - network_pubblica
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - PEP_PORT=${PEP_PORT}
      - PDP_VALUTA=${PDP_VALUTA}

  pdp:
    build: ./pdp
    container_name: zta_pdp
    depends_on:
      - splunk
    ports:
      - "8001:8001"
    networks:
      - network_aziendale
    environment:
      - SPLUNK_HOST=${SPLUNK_HOST}
      - SPLUNK_PORT=${SPLUNK_PORT}
      - SPLUNK_TOKEN=${SPLUNK_HEC_TOKEN}
      - SPLUNK_USERNAME=${SPLUNK_USERNAME}
      - SPLUNK_PASSWORD=${SPLUNK_PASSWORD}
      - PDP_PORT=${PDP_PORT}
    volumes:
      - pdp_logs:/mnt/pdp_logs

  iptables:
    build: ./iptables
    container_name: zta_iptables
    cap_add:
      - NET_ADMIN
    volumes:
      - ./iptables/iptables.rules:/iptables.rules
      - iptables_logs:/var/log/iptables_logs
    networks:
      - network_aziendale
      - network_vpn
      - network_domestica
      - network_pubblica
    privileged: true
    command: ["sh", "-c", "iptables-restore < /iptables.rules && tail -f /dev/null"]
    depends_on:
      db:  # iptables deve dipendere dal db, per garantirne l'avvio prima
          condition: service_healthy

  squid:
    image: sameersbn/squid
    container_name: zta_squid
    volumes:
      - ./squid/squid.conf:/etc/squid/squid.conf
      - squid_logs:/var/log/squid
    ports:
      - "3129:3128"
    networks:
      - network_aziendale
      - network_vpn
      - network_domestica
      - network_pubblica
    depends_on:
      - iptables

  snort:
    build: ./snort  
    container_name: zta_snort
    cap_add:
      - NET_ADMIN  # Permette al contenitore di configurare la rete
    networks:
      - network_aziendale
      - network_vpn
      - network_domestica
      - network_pubblica
    ports:
      - "5140:5140/udp"  # Esporta la porta per gli avvisi
    volumes:
      - snort_logs:/var/log/snort
    command: ["snort", "-A", "console", "-c", "/etc/snort/snort.conf", "-i", "eth0"] 
    depends_on: 
      - squid            

  splunk:
    build: ./splunk
    container_name: zta_splunk
    environment:
      - SPLUNK_START_ARGS=--accept-license --no-prompt --answer-yes
      - SPLUNK_IGNORE_SSL_ERRORS=true
      - SPLUNK_PASSWORD=${SPLUNK_PASSWORD}
    networks:
      - network_aziendale
    ports:
      - "8000:8000" # Web UI (accessibile via browser)
      - "8088:8088" # HTTP Event Collector (HEC)
      - "8089:8089" # REST API di Splunk Management
      - "9997:9997" # Universal Forwarder
    volumes:
      - splunk_data:/opt/splunk  # Docker-managed volume, non scrive localmente
      - snort_logs:/mnt/snort_logs
      - iptables_logs:/mnt/iptables_logs
      - squid_logs:/mnt/squid_logs
      - postgres_logs:/mnt/postgres_logs
      - pdp_logs:/mnt/pdp_logs
    depends_on:
      - snort

## CLIENT per test sviluppo + 4 client per test finale

  client_interattivo:
    build: ./client
    container_name: client_interattivo
    networks:
      - network_aziendale
    environment:
      - SPLUNK_HEC_TOKEN=${SPLUNK_HEC_TOKEN}
    stdin_open: true
    tty: true

  client_aziendale:
    build: ./client
    container_name: client_aziendale
    networks:
      - network_aziendale
    environment:
      - SPLUNK_HEC_TOKEN=${SPLUNK_HEC_TOKEN}
    command: ["sleep", "infinity"]

  client_vpn:
    build: ./client
    container_name: client_vpn
    networks:
      - network_vpn
    environment:
      - SPLUNK_HEC_TOKEN=${SPLUNK_HEC_TOKEN}
    command: ["sleep", "infinity"]

  client_domestica:
    build: ./client
    container_name: client_domestica
    networks:
      - network_domestica
    environment:
      - SPLUNK_HEC_TOKEN=${SPLUNK_HEC_TOKEN}
    command: ["sleep", "infinity"]

  client_pubblica:
    build: ./client
    container_name: client_pubblica
    networks:
      - network_pubblica
    environment:
      - SPLUNK_HEC_TOKEN=${SPLUNK_HEC_TOKEN}
    command: ["sleep", "infinity"]

volumes:
  splunk_data:
  snort_logs:
  iptables_logs:
  squid_logs:
  postgres_logs:
  pdp_logs:

networks:
  network_aziendale:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.1.0/24

  network_vpn:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.2.0/24

  network_domestica:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.3.0/24

  network_pubblica:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.4.0/24

